// Code generated by sysl DO NOT EDIT.
package mydependency

import (
	"context"
	"fmt"
	"net/http"
	"net/url"

	"github.service.anz/sysl/server-lib/common"
	"github.service.anz/sysl/server-lib/restlib"
	"github.service.anz/sysl/server-lib/validator"
)

// Service interface for mydependency
type Service interface {
	GetTodos(ctx context.Context, req *GetTodosRequest) (*TodosResponse, error)
}

// Client for mydependency API
type Client struct {
	client *http.Client
	url    string
}

// NewClient for mydependency
func NewClient(client *http.Client, serviceURL string) *Client {
	return &Client{client, serviceURL}
}

// GetTodos ...
func (s *Client) GetTodos(ctx context.Context, req *GetTodosRequest) (*TodosResponse, error) {
	required := []string{}
	okResponse := &TodosResponse{}
	u, err := url.Parse(fmt.Sprintf("%s/todos/%v", s.url, req.ID))
	if err != nil {
		return nil, common.CreateError(ctx, common.InternalError, "failed to parse url", err)
	}

	result, err := restlib.DoHTTPRequest(ctx, s.client, "GET", u.String(), nil, required, okResponse, nil)
	if err != nil {
		return nil, common.CreateError(ctx, common.DownstreamUnavailableError, "call failed: mydependency <- GET "+u.String(), err)
	}

	if result.HTTPResponse.StatusCode == http.StatusUnauthorized {
		return nil, common.CreateDownstreamError(ctx, common.DownstreamUnauthorizedError, result.HTTPResponse, result.Body, nil)
	}

	OkTodosResponseResponse, ok := result.Response.(*TodosResponse)
	if ok {
		valErr := validator.Validate(OkTodosResponseResponse)
		if valErr != nil {
			return nil, common.CreateDownstreamError(ctx, common.DownstreamUnexpectedResponseError, result.HTTPResponse, result.Body, valErr)
		}

		return OkTodosResponseResponse, nil
	}

	return nil, common.CreateDownstreamError(ctx, common.DownstreamUnexpectedResponseError, result.HTTPResponse, result.Body, nil)
}
