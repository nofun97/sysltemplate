// Package simple is generated by github.com/omeid/go-resources
package simple

import (
	"bytes"
	"errors"
	"net/http"
	"os"
	"path/filepath"
	"strings"
	"time"
)

// FileSystem is an http.FileSystem implementation.
type FileSystem struct {
	files map[string]File
}

// String returns the content of the file as string.
func (fs *FileSystem) String(name string) (string, bool) {
	if filepath.Separator != '/' && strings.IndexRune(name, filepath.Separator) >= 0 ||
		strings.Contains(name, "\x00") {
		return "", false
	}

	file, ok := fs.files[name]

	if !ok {
		return "", false
	}

	return string(file.data), true
}

// Open implements http.FileSystem.Open
func (fs *FileSystem) Open(name string) (http.File, error) {
	if filepath.Separator != '/' && strings.IndexRune(name, filepath.Separator) >= 0 ||
		strings.Contains(name, "\x00") {
		return nil, errors.New("http: invalid character in file path")
	}
	file, ok := fs.files[name]
	if !ok {
		files := []os.FileInfo{}
		for path, file := range fs.files {
			if strings.HasPrefix(path, name) {
				fi := file.fi
				files = append(files, &fi)
			}
		}

		if len(files) == 0 {
			return nil, os.ErrNotExist
		}

		//We have a directory.
		return &File{
			fi: FileInfo{
				isDir: true,
				files: files,
			}}, nil
	}
	file.Reader = bytes.NewReader(file.data)
	return &file, nil
}

// File implements http.File
type File struct {
	*bytes.Reader
	data []byte
	fi   FileInfo
}

// Close is a noop-closer.
func (f *File) Close() error {
	return nil
}

// Readdir implements http.File.Readdir
func (f *File) Readdir(_ int) ([]os.FileInfo, error) {
	return nil, os.ErrNotExist
}

// Stat implements http.Stat.Readdir
func (f *File) Stat() (os.FileInfo, error) {
	return &f.fi, nil
}

// FileInfo implements the os.FileInfo interface.
type FileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
	isDir   bool
	sys     interface{}

	files []os.FileInfo
}

// Name implements os.FileInfo.Name
func (f *FileInfo) Name() string {
	return f.name
}

// Size implements os.FileInfo.Size
func (f *FileInfo) Size() int64 {
	return f.size
}

// Mode implements os.FileInfo.Mode
func (f *FileInfo) Mode() os.FileMode {
	return f.mode
}

// ModTime implements os.FileInfo.ModTime
func (f *FileInfo) ModTime() time.Time {
	return f.modTime
}

// IsDir implements os.FileInfo.IsDir
func (f *FileInfo) IsDir() bool {
	return f.isDir
}

// Readdir implements os.FileInfo.Readdir
func (f *FileInfo) Readdir(_ int) ([]os.FileInfo, error) {
	return f.files, nil
}

// Sys returns the underlying value.
func (f *FileInfo) Sys() interface{} {
	return f.sys
}

func init() {
	swagger.file = &FileSystem{
		files: map[string]File{
			"/out.json": {
				data: []byte{
					0x7b, 0x22, 0x73, 0x77, 0x61, 0x67, 0x67, 0x65, 0x72, 0x22, 0x3a, 0x22,
					0x32, 0x2e, 0x30, 0x22, 0x2c, 0x22, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0x3a,
					0x7b, 0x22, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x3a, 0x22,
					0x30, 0x2e, 0x30, 0x2e, 0x30, 0x22, 0x7d, 0x2c, 0x22, 0x70, 0x61, 0x74,
					0x68, 0x73, 0x22, 0x3a, 0x7b, 0x22, 0x2f, 0x66, 0x6f, 0x6f, 0x62, 0x61,
					0x72, 0x22, 0x3a, 0x7b, 0x22, 0x67, 0x65, 0x74, 0x22, 0x3a, 0x7b, 0x22,
					0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x73, 0x22, 0x3a, 0x5b, 0x22,
					0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f,
					0x6a, 0x73, 0x6f, 0x6e, 0x22, 0x5d, 0x2c, 0x22, 0x70, 0x72, 0x6f, 0x64,
					0x75, 0x63, 0x65, 0x73, 0x22, 0x3a, 0x5b, 0x22, 0x61, 0x70, 0x70, 0x6c,
					0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e,
					0x22, 0x5d, 0x2c, 0x22, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
					0x73, 0x22, 0x3a, 0x7b, 0x22, 0x32, 0x30, 0x30, 0x22, 0x3a, 0x7b, 0x22,
					0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22,
					0x3a, 0x22, 0x4f, 0x4b, 0x22, 0x2c, 0x22, 0x73, 0x63, 0x68, 0x65, 0x6d,
					0x61, 0x22, 0x3a, 0x7b, 0x22, 0x24, 0x72, 0x65, 0x66, 0x22, 0x3a, 0x22,
					0x23, 0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
					0x73, 0x2f, 0x73, 0x74, 0x72, 0x22, 0x7d, 0x7d, 0x7d, 0x7d, 0x7d, 0x7d,
					0x2c, 0x22, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
					0x73, 0x22, 0x3a, 0x7b, 0x22, 0x53, 0x74, 0x75, 0x66, 0x66, 0x22, 0x3a,
					0x7b, 0x22, 0x74, 0x79, 0x70, 0x65, 0x22, 0x3a, 0x22, 0x6f, 0x62, 0x6a,
					0x65, 0x63, 0x74, 0x22, 0x2c, 0x22, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
					0x22, 0x3a, 0x22, 0x74, 0x75, 0x70, 0x6c, 0x65, 0x22, 0x2c, 0x22, 0x70,
					0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x22, 0x3a, 0x7b,
					0x22, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x3a, 0x7b, 0x22,
					0x74, 0x79, 0x70, 0x65, 0x22, 0x3a, 0x22, 0x73, 0x74, 0x72, 0x69, 0x6e,
					0x67, 0x22, 0x2c, 0x22, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x22, 0x3a,
					0x22, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x22, 0x7d, 0x7d, 0x7d, 0x2c,
					0x22, 0x73, 0x74, 0x72, 0x22, 0x3a, 0x7b, 0x22, 0x74, 0x79, 0x70, 0x65,
					0x22, 0x3a, 0x22, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x22, 0x2c, 0x22,
					0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x22, 0x3a, 0x22, 0x73, 0x74, 0x72,
					0x69, 0x6e, 0x67, 0x22, 0x7d, 0x7d, 0x7d,
				},
				fi: FileInfo{
					name:    "out.json",
					size:    379,
					modTime: time.Unix(0, 1582777291460655846),
					isDir:   false,
				},
			},
		},
	}
}
